class Payment:
    def process_payment(self, amount):
        raise NotImplementedError("Subclass must implement payment method")
class CreditCardPayment(Payment):
    def process_payment(self, amount):
        return f"Paid {amount} using Credit Card"

class PayPalPayment(Payment):
    def process_payment(self, amount):
        return f"Paid {amount} using PayPal"
from abc import ABC, abstractmethod

class Borrowable(ABC):
    @abstractmethod
    def borrow(self): pass

class Returnable(ABC):
    @abstractmethod
    def return_book(self): pass
class LibrarySystem:
    def __init__(self, payment_method: Payment):
        self.payment_method = payment_method

    def pay_fee(self, amount):
        return self.payment_method.process_payment(amount)
